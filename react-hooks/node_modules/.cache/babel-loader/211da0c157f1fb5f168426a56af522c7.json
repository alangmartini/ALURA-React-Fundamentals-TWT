{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan\\\\Desktop\\\\React-projects\\\\react-hooks\\\\src\\\\pages\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let [names, setNames] = useState(); // names are my info, its importante to remember that names is a LIST of OBJETCS\n\n  /* this is the same as:\n  names = [\n    {\n      id: 1,\n      name: something,\n      surname: bodysomething\n    }\n    {\n      id: 2,\n      name: otherthing\n      surname: bodyotherthing\n    }\n  ] \n  */\n\n  /*\n  \n  setNames is a function to change the state\n  setNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\n  if you want to \"append\" the old value along, there is a trick:\n  \n  setnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n  \n  */\n  //setNames are the way i have to change and interact with names.\n\n  return (\n    /*#__PURE__*/\n    //formulario receives setNames, cuz its whos responsible for updating our State, our data!\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Teste, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  ); // Lista receives our names, cuz its the one resposible for SHOWING the info stored in STATES\n}\n\n_s(App, \"Q7dnPOsbButB4Ypzgy1N5anqcrQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","names","setNames"],"sources":["C:/Users/Alan/Desktop/React-projects/react-hooks/src/pages/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport Formulario from '../components/Formulario'\nimport Lista from '../components/Lista'\nfunction App() {\n\nlet [names, setNames] = useState()\n// names are my info, its importante to remember that names is a LIST of OBJETCS\n/* this is the same as:\nnames = [\n  {\n    id: 1,\n    name: something,\n    surname: bodysomething\n  }\n  {\n    id: 2,\n    name: otherthing\n    surname: bodyotherthing\n  }\n] \n*/\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n\n  return (\n    //formulario receives setNames, cuz its whos responsible for updating our State, our data!\n\n    <div className=\"App\">\n      <Teste />\n    </div>\n  );\n  // Lista receives our names, cuz its the one resposible for SHOWING the info stored in STATES\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAIA,SAASC,GAAT,GAAe;EAAA;;EAEf,IAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,EAAhC,CAFe,CAGf;;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;;EAEE;IAAA;IACE;IAEA;MAAK,SAAS,EAAC,KAAf;MAAA,uBACE,QAAC,KAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EAHF,EA7Ba,CAoCb;AACD;;GArCQC,G;;KAAAA,G;AAuCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}