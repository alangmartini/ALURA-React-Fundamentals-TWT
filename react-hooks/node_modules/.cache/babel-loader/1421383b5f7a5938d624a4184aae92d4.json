{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan\\\\Desktop\\\\React-projects\\\\react-hooks\\\\src\\\\pages\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Input from '../components/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // try with rendering ul and tables from a STATE\n  let [names, setNames] = useState([50, 100]); //criar um component input, colocar o state dele como o valor interno dele, e dai pegar com o valor do state dele.\n\n  return (\n    /*#__PURE__*/\n    // aqui o onclick não recebeu nada, mas se eu quisesse, poderia passar o parametro Evento, que\n    // simboliza tudo relacionado aos eventos daquele botão. Assim como SetState pode ou não receber um prevValue\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          console.log(e.currentTarget.innerText);\n          console.log(e.target); //console.log(e)\n          //console.log()\n        },\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          on: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"this is a class name\",\n          onClick: e => {\n            console.log();\n          },\n          children: \"Click ME!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"UUwDEMApRkgIJd4ssERMXro/J+0=\");\n\n_c = App;\n;\nexport default App;\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n//formulario receives setNames, cuz its whos responsible for updating our State, our data!\n// onClick must always receive a arrow function (1)\n// if you want to manipulate a previous value, setNames also need a arrow funciont (2)\n//since its a list we're dealing with, we need a map function to alter each value (3)\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Input","App","names","setNames","e","preventDefault","console","log","currentTarget","innerText","target"],"sources":["C:/Users/Alan/Desktop/React-projects/react-hooks/src/pages/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Input from '../components/Input';\n\n\nfunction App() {\n// try with rendering ul and tables from a STATE\nlet [names, setNames] = useState([50, 100])\n    //criar um component input, colocar o state dele como o valor interno dele, e dai pegar com o valor do state dele.\n\n  return (\n    // aqui o onclick não recebeu nada, mas se eu quisesse, poderia passar o parametro Evento, que\n    // simboliza tudo relacionado aos eventos daquele botão. Assim como SetState pode ou não receber um prevValue\n    <div className=\"App\">\n      <form \n      onSubmit={(e) => {\n        e.preventDefault()\n        console.log(e.currentTarget.innerText)\n        console.log(e.target)\n        //console.log(e)\n        //console.log()\n      }}>\n       <Input\n       on\n       />\n      <button \n      type=\"submit\"\n      className=\"this is a class name\"\n      onClick={ (e) => { \n\n        console.log()\n        \n\n\n      }} \n        >Click ME!</button>\n      </form>\n    </div>\n  )};\nexport default App;\n\n\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n    //formulario receives setNames, cuz its whos responsible for updating our State, our data!\n// onClick must always receive a arrow function (1)\n// if you want to manipulate a previous value, setNames also need a arrow funciont (2)\n//since its a list we're dealing with, we need a map function to alter each value (3)"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EACf;EACA,IAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAC,EAAD,EAAK,GAAL,CAAD,CAAhC,CAFe,CAGX;;EAEF;IAAA;IACE;IACA;IACA;MAAK,SAAS,EAAC,KAAf;MAAA,uBACE;QACA,QAAQ,EAAGK,CAAD,IAAO;UACfA,CAAC,CAACC,cAAF;UACAC,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,aAAF,CAAgBC,SAA5B;UACAH,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACM,MAAd,EAHe,CAIf;UACA;QACD,CAPD;QAAA,wBAQC,QAAC,KAAD;UACA,EAAE;QADF;UAAA;UAAA;UAAA;QAAA,QARD,eAWA;UACA,IAAI,EAAC,QADL;UAEA,SAAS,EAAC,sBAFV;UAGA,OAAO,EAAIN,CAAD,IAAO;YAEfE,OAAO,CAACC,GAAR;UAID,CATD;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAXA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EAHF;AA4BE;;GAjCKN,G;;KAAAA,G;AAiCL;AACJ,eAAeA,GAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA"},"metadata":{},"sourceType":"module"}