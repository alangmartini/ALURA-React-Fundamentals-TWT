{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan\\\\Desktop\\\\React-projects\\\\react-hooks\\\\src\\\\pages\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // try with rendering ul and tables from a STATE\n  let [names, setNames] = useState(String); //criar um component input, colocar o state dele como o valor interno dele, e dai pegar com o valor do state dele.\n\n  return (\n    /*#__PURE__*/\n    // aqui o onclick não recebeu nada, mas se eu quisesse, poderia passar o parametro Evento, que\n    // simboliza tudo relacionado aos eventos daquele botão. Assim como SetState pode ou não receber um prevValue\n    _jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"znmdp6o6qxbD645SGpyc6UYshgI=\");\n\n_c = App;\n;\nexport default App;\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n//formulario receives setNames, cuz its whos responsible for updating our State, our data!\n// onClick must always receive a arrow function (1)\n// if you want to manipulate a previous value, setNames also need a arrow funciont (2)\n//since its a list we're dealing with, we need a map function to alter each value (3)\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","names","setNames","String"],"sources":["C:/Users/Alan/Desktop/React-projects/react-hooks/src/pages/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Formulario from '../components'\n\n\nfunction App() {\n// try with rendering ul and tables from a STATE\nlet [names, setNames] = useState(String)\n    //criar um component input, colocar o state dele como o valor interno dele, e dai pegar com o valor do state dele.\n\n  return (\n    // aqui o onclick não recebeu nada, mas se eu quisesse, poderia passar o parametro Evento, que\n    // simboliza tudo relacionado aos eventos daquele botão. Assim como SetState pode ou não receber um prevValue\n    <div className=\"App\">\n     \n    </div>\n  )};\nexport default App;\n\n\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n    //formulario receives setNames, cuz its whos responsible for updating our State, our data!\n// onClick must always receive a arrow function (1)\n// if you want to manipulate a previous value, setNames also need a arrow funciont (2)\n//since its a list we're dealing with, we need a map function to alter each value (3)"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAIA,SAASC,GAAT,GAAe;EAAA;;EACf;EACA,IAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAACI,MAAD,CAAhC,CAFe,CAGX;;EAEF;IAAA;IACE;IACA;IACA;MAAK,SAAS,EAAC;IAAf;MAAA;MAAA;MAAA;IAAA;EAHF;AAME;;GAXKH,G;;KAAAA,G;AAWL;AACJ,eAAeA,GAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA"},"metadata":{},"sourceType":"module"}