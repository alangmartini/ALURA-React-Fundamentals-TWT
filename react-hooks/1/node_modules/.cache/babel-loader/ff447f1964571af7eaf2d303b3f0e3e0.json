{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan\\\\Desktop\\\\React-projects\\\\react-hooks\\\\src\\\\pages\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // try with rendering ul and tables from a STATE\n  let [names, setNames] = useState([50, 100]);\n  return (\n    /*#__PURE__*/\n    // aqui o onclick não recebeu nada, mas se eu quisesse, poderia passar o parametro Evento, que\n    // simboliza tudo relacionado aos eventos daquele botão. Assim como SetState pode ou não receber um prevValue\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          console.log(e); //console.log(e)\n          //console.log()\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            let a = e.target.value;\n            console.log(a);\n            return a;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"this is a class name\",\n          onClick: e => {\n            console.log();\n          },\n          children: \"Click ME!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"UUwDEMApRkgIJd4ssERMXro/J+0=\");\n\n_c = App;\n;\nexport default App;\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n//formulario receives setNames, cuz its whos responsible for updating our State, our data!\n// onClick must always receive a arrow function (1)\n// if you want to manipulate a previous value, setNames also need a arrow funciont (2)\n//since its a list we're dealing with, we need a map function to alter each value (3)\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","names","setNames","e","preventDefault","console","log","a","target","value"],"sources":["C:/Users/Alan/Desktop/React-projects/react-hooks/src/pages/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\n\nfunction App() {\n// try with rendering ul and tables from a STATE\nlet [names, setNames] = useState([50, 100])\n \n  return (\n    // aqui o onclick não recebeu nada, mas se eu quisesse, poderia passar o parametro Evento, que\n    // simboliza tudo relacionado aos eventos daquele botão. Assim como SetState pode ou não receber um prevValue\n    <div className=\"App\">\n      <form \n      \n      onSubmit={(e) => {\n        e.preventDefault()\n        console.log(e)\n        //console.log(e)\n        //console.log()\n      }}>\n        <input \n        onChange={(e) => {\n          let a = e.target.value\n\n          console.log(a)\n\n          return a\n        }}\n        />\n      <button \n      className=\"this is a class name\"\n      onClick={ (e) => { \n\n        console.log()\n        \n\n\n      }} \n        >Click ME!</button>\n      </form>\n    </div>\n  )};\nexport default App;\n\n\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n    //formulario receives setNames, cuz its whos responsible for updating our State, our data!\n// onClick must always receive a arrow function (1)\n// if you want to manipulate a previous value, setNames also need a arrow funciont (2)\n//since its a list we're dealing with, we need a map function to alter each value (3)"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EACf;EACA,IAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAC,EAAD,EAAK,GAAL,CAAD,CAAhC;EAEE;IAAA;IACE;IACA;IACA;MAAK,SAAS,EAAC,KAAf;MAAA,uBACE;QAEA,QAAQ,EAAGI,CAAD,IAAO;UACfA,CAAC,CAACC,cAAF;UACAC,OAAO,CAACC,GAAR,CAAYH,CAAZ,EAFe,CAGf;UACA;QACD,CAPD;QAAA,wBAQE;UACA,QAAQ,EAAGA,CAAD,IAAO;YACf,IAAII,CAAC,GAAGJ,CAAC,CAACK,MAAF,CAASC,KAAjB;YAEAJ,OAAO,CAACC,GAAR,CAAYC,CAAZ;YAEA,OAAOA,CAAP;UACD;QAPD;UAAA;UAAA;UAAA;QAAA,QARF,eAiBA;UACA,SAAS,EAAC,sBADV;UAEA,OAAO,EAAIJ,CAAD,IAAO;YAEfE,OAAO,CAACC,GAAR;UAID,CARD;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAjBA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EAHF;AAiCE;;GArCKN,G;;KAAAA,G;AAqCL;AACJ,eAAeA,GAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA"},"metadata":{},"sourceType":"module"}