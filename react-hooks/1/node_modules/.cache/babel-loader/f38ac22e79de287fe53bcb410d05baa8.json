{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan\\\\Desktop\\\\React-projects\\\\react-hooks\\\\1\\\\src\\\\components\\\\Formulario\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Formulario(_ref) {\n  _s();\n\n  let {\n    setNames\n  } = _ref;\n  let [inputContent, setInputContent] = useState({\n    Model: '',\n    Licenseplate: '',\n    Entrada: ''\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      props.setNames(prevValue => [...prevValue, { ...inputContent,\n        //a spread is necessary because inputContent is a Object, and we are inserting new itens inside de object\n        Selecionado: false,\n        Completado: false,\n        Id: uuidv4() //we are inserting a ID  so we can know which LI is being selected\n\n      }]); // on submit, after we updated our props, we return the value to empty\n\n      setInputContent({\n        Model: '',\n        Licenseplate: '',\n        Entrada: ''\n      });\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Insert your Model\",\n      value: inputContent.Model,\n      onChange: e => {\n        //both inputs communicate with this State. The idea is to give the input to state, and make the Form take it later\n        setInputContent({ ...inputContent,\n          Model: e.target.value\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Insert your license plate\",\n      value: inputContent.Licenseplate,\n      onChange: e => {\n        ;\n        setInputContent({ ...inputContent,\n          Licenseplate: e.target.value\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: () => {\n        setInputContent({ ...inputContent,\n          Entrada: new Date().getDate().toString() + '/' + new Date().getMonth().toString() + '/' + new Date().getFullYear().toString() + ' - ' + new Date().getHours().toString() + ' : ' + new Date().getMinutes().toString() + ' : ' + new Date().getSeconds().toString()\n        });\n      },\n      children: \"Adicionar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Formulario, \"B2vYG893ZIGu6l7eCSwY/bYeIC8=\");\n\n_c = Formulario;\n\nvar _c;\n\n$RefreshReg$(_c, \"Formulario\");","map":{"version":3,"names":["React","useState","v4","uuidv4","Formulario","setNames","inputContent","setInputContent","Model","Licenseplate","Entrada","e","preventDefault","props","prevValue","Selecionado","Completado","Id","target","value","Date","getDate","toString","getMonth","getFullYear","getHours","getMinutes","getSeconds"],"sources":["C:/Users/Alan/Desktop/React-projects/react-hooks/1/src/components/Formulario/index.tsx"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport IInfos from \"../../types/Infos\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nexport default function Formulario({setNames}){\r\n\r\n    let [inputContent, setInputContent] = useState(\r\n        {\r\n        Model: '',\r\n        Licenseplate: '',\r\n        Entrada: '',\r\n        }\r\n)\r\n\r\n    return(\r\n        <form \r\n        onSubmit={(e) => {\r\n            e.preventDefault()\r\n            props.setNames( (prevValue: IInfos[]) => \r\n            [\r\n                ...prevValue, \r\n                {\r\n                ...inputContent, //a spread is necessary because inputContent is a Object, and we are inserting new itens inside de object\r\n                Selecionado: false,\r\n                Completado: false,\r\n                Id: uuidv4() //we are inserting a ID  so we can know which LI is being selected\r\n                }\r\n            \r\n            ])\r\n\r\n            // on submit, after we updated our props, we return the value to empty\r\n            setInputContent({\r\n                Model: '',\r\n                Licenseplate: '',\r\n                Entrada: '',\r\n            })\r\n            \r\n        }}>\r\n            \r\n            <input \r\n            placeholder=\"Insert your Model\"\r\n            value={inputContent.Model}\r\n            onChange={(e) => {\r\n                //both inputs communicate with this State. The idea is to give the input to state, and make the Form take it later\r\n                setInputContent({ ...inputContent, Model: e.target.value})\r\n            }}/>\r\n            <br />\r\n            <input \r\n            placeholder=\"Insert your license plate\"\r\n            value={inputContent.Licenseplate}\r\n            onChange={(e) => {\r\n                ;\r\n                setInputContent({...inputContent, Licenseplate: e.target.value});\r\n                \r\n            }}\r\n            />\r\n            <br />\r\n            <button type='submit'\r\n                onClick={() =>{\r\n                    setInputContent({ ...inputContent, \r\n                        Entrada: \r\n                        new Date().getDate().toString() + '/' +\r\n                        new Date().getMonth().toString() + '/' +\r\n                        new Date().getFullYear().toString() + ' - ' +\r\n                        new Date().getHours().toString() + ' : ' +\r\n                        new Date().getMinutes().toString() + ' : ' +\r\n                        new Date().getSeconds().toString() \r\n       \r\n                     })\r\n                }}\r\n            >Adicionar</button>\r\n        </form>\r\n    )\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,MAA3B;;AACA,eAAe,SAASC,UAAT,OAA+B;EAAA;;EAAA,IAAX;IAACC;EAAD,CAAW;EAE1C,IAAI,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAC1C;IACAO,KAAK,EAAE,EADP;IAEAC,YAAY,EAAE,EAFd;IAGAC,OAAO,EAAE;EAHT,CAD0C,CAA9C;EAQA,oBACI;IACA,QAAQ,EAAGC,CAAD,IAAO;MACbA,CAAC,CAACC,cAAF;MACAC,KAAK,CAACR,QAAN,CAAiBS,SAAD,IAChB,CACI,GAAGA,SADP,EAEI,EACA,GAAGR,YADH;QACiB;QACjBS,WAAW,EAAE,KAFb;QAGAC,UAAU,EAAE,KAHZ;QAIAC,EAAE,EAAEd,MAAM,EAJV,CAIa;;MAJb,CAFJ,CADA,EAFa,CAcb;;MACAI,eAAe,CAAC;QACZC,KAAK,EAAE,EADK;QAEZC,YAAY,EAAE,EAFF;QAGZC,OAAO,EAAE;MAHG,CAAD,CAAf;IAMH,CAtBD;IAAA,wBAwBI;MACA,WAAW,EAAC,mBADZ;MAEA,KAAK,EAAEJ,YAAY,CAACE,KAFpB;MAGA,QAAQ,EAAGG,CAAD,IAAO;QACb;QACAJ,eAAe,CAAC,EAAE,GAAGD,YAAL;UAAmBE,KAAK,EAAEG,CAAC,CAACO,MAAF,CAASC;QAAnC,CAAD,CAAf;MACH;IAND;MAAA;MAAA;MAAA;IAAA,QAxBJ,eA+BI;MAAA;MAAA;MAAA;IAAA,QA/BJ,eAgCI;MACA,WAAW,EAAC,2BADZ;MAEA,KAAK,EAAEb,YAAY,CAACG,YAFpB;MAGA,QAAQ,EAAGE,CAAD,IAAO;QACb;QACAJ,eAAe,CAAC,EAAC,GAAGD,YAAJ;UAAkBG,YAAY,EAAEE,CAAC,CAACO,MAAF,CAASC;QAAzC,CAAD,CAAf;MAEH;IAPD;MAAA;MAAA;MAAA;IAAA,QAhCJ,eAyCI;MAAA;MAAA;MAAA;IAAA,QAzCJ,eA0CI;MAAQ,IAAI,EAAC,QAAb;MACI,OAAO,EAAE,MAAK;QACVZ,eAAe,CAAC,EAAE,GAAGD,YAAL;UACZI,OAAO,EACP,IAAIU,IAAJ,GAAWC,OAAX,GAAqBC,QAArB,KAAkC,GAAlC,GACA,IAAIF,IAAJ,GAAWG,QAAX,GAAsBD,QAAtB,EADA,GACmC,GADnC,GAEA,IAAIF,IAAJ,GAAWI,WAAX,GAAyBF,QAAzB,EAFA,GAEsC,KAFtC,GAGA,IAAIF,IAAJ,GAAWK,QAAX,GAAsBH,QAAtB,EAHA,GAGmC,KAHnC,GAIA,IAAIF,IAAJ,GAAWM,UAAX,GAAwBJ,QAAxB,EAJA,GAIqC,KAJrC,GAKA,IAAIF,IAAJ,GAAWO,UAAX,GAAwBL,QAAxB;QAPY,CAAD,CAAf;MAUH,CAZL;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QA1CJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA2DH;;GArEuBlB,U;;KAAAA,U"},"metadata":{},"sourceType":"module"}