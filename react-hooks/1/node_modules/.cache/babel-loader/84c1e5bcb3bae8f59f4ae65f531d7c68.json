{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan\\\\Desktop\\\\React-projects\\\\react-hooks\\\\src\\\\pages\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let [names, setNames] = useState([50]);\n  return (\n    /*#__PURE__*/\n    //formulario receives setNames, cuz its whos responsible for updating our State, our data!\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setNames(prevValue => prevValue.map(item => item * 3));\n          console.log(names);\n        },\n        children: \"Click ME!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this)\n  ); // Lista receives our names, cuz its the one resposible for SHOWING the info stored in STATES\n  //onEvents necessarily need at least one function. Just accepts it!\n}\n\n_s(App, \"QyQev7irvQ9m/kLIntybdw/JRmY=\");\n\n_c = App;\nexport default App; // names are my info, its importante to remember that names is a LIST of OBJETCS\n\n/* this is the same as:\nnames = [\n  {\n    id: 1,\n    name: something,\n    surname: bodysomething\n  }\n  {\n    id: 2,\n    name: otherthing\n    surname: bodyotherthing\n  }\n]\n*/\n\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","names","setNames","prevValue","map","item","console","log"],"sources":["C:/Users/Alan/Desktop/React-projects/react-hooks/src/pages/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n\nlet [names, setNames] = useState([50])\n\n  return (\n    //formulario receives setNames, cuz its whos responsible for updating our State, our data!\n\n    <div className=\"App\">\n      <button onClick={ () => {\n\n        setNames((prevValue) => (prevValue.map((item) => item * 3)))\n\n        console.log(names)\n      }} \n        >Click ME!</button>\n    </div>\n  );\n  // Lista receives our names, cuz its the one resposible for SHOWING the info stored in STATES\n  //onEvents necessarily need at least one function. Just accepts it!\n}\n\nexport default App;\n\n// names are my info, its importante to remember that names is a LIST of OBJETCS\n/* this is the same as:\nnames = [\n  {\n    id: 1,\n    name: something,\n    surname: bodysomething\n  }\n  {\n    id: 2,\n    name: otherthing\n    surname: bodyotherthing\n  }\n]\n*/\n/*\n\nsetNames is a function to change the state\nsetNames((prevValue) => prevValue + 3 ) // it musts receive the old value if is inside a function to alter the old value.\nif you want to \"append\" the old value along, there is a trick:\n\nsetnames([ ...prevValue,(prevValue) => prevValue + 3 ])\n\n*/\n//setNames are the way i have to change and interact with names.\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEf,IAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAhC;EAEE;IAAA;IACE;IAEA;MAAK,SAAS,EAAC,KAAf;MAAA,uBACE;QAAQ,OAAO,EAAG,MAAM;UAEtBG,QAAQ,CAAEC,SAAD,IAAgBA,SAAS,CAACC,GAAV,CAAeC,IAAD,IAAUA,IAAI,GAAG,CAA/B,CAAjB,CAAR;UAEAC,OAAO,CAACC,GAAR,CAAYN,KAAZ;QACD,CALD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EAHF,EAJa,CAiBb;EACA;AACD;;GAnBQD,G;;KAAAA,G;AAqBT,eAAeA,GAAf,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}